[0m[1;33;40m{[0m
[0m[1;37;40m '[1;92;40m../bash/parse.y[1;37;40m': '[1;96;40m#  define last_shell_getc_is_singlebyte \\\n#  define MBTEST(x)\t((x) && last_shell_getc_is_singlebyte)\n#  define last_shell_getc_is_singlebyte\t1\nstatic int shell_getc __P((int));\n   and read into shell_input_line, but have not returned from shell_getc.\n * Pushing and popping strings.  This works together with shell_getc to\n * Only called when there is something on the stack.  Called from shell_getc\n/* These are used by read_token_word, but appear up here so that shell_getc\nshell_getc (remove_quoted_newline)\n\t      internal_warning ("shell_getc: ignored null byte in input");\n\t\t    internal_warning(_("shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line truncated"), shell_input_line_size, (unsigned long)SIZE_MAX);\n   last_shell_getc_is_singlebyte should take care of it, though. */\n  while ((c = shell_getc (0)) != EOF && c != character)\n     space to the expansion.  Works with shell_getc above. */\n\t the code in shell_getc that deals with reaching the end of an\n  while ((character = shell_getc (1)) != EOF && shellblank (character))\nitrace("shell_getc: bash_input.location.string = `%s\'", bash_input.location.string);\n      shell_getc (0);\n\tpeek_char = shell_getc (0);\n\tpeek_char = shell_getc (1);\n\t      peek_char = shell_getc (1);\n\t      peek_char = shell_getc (1);\n\t  peek_char = shell_getc (1);\n      ch = shell_getc (qc != \'\\\'\' && (tflags & (LEX_PASSNEXT)) == 0);\n  peekc = shell_getc (0);\n      ch = shell_getc (qc != \'\\\'\' && (tflags & (LEX_INCOMMENT|LEX_PASSNEXT|LEX_QUOTEDDOC)) == 0);\n\t  peekc = shell_getc (1);\n\t  peekc = shell_getc (1);\n\t      peekc = shell_getc (1);\n  c = shell_getc (0);\n\t  peek_char = shell_getc (0);\n\t  peek_char = shell_getc (1);\n\t  peek_char = shell_getc (1);\n\t  peek_char = shell_getc (1);\n      character = shell_getc (cd != \'\\\'\' && pass_next_character == 0);\n  result = (last_shell_getc_is_singlebyte) ? special_case_tokens (token) : -1;\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/ChangeLog[1;37;40m': "[1;96;40m\t- shell_getc: if we are reading input from a string, and we get the\n\t  to the values in tflags when calling shell_getc.  Fixes bug reported\n\t- shell_getc: move code that decides whether to append a space to an\n\t- shell_getc: set history_quoting_state based on the contents of the\n\t- shell_getc: don't execute the alias hack (returning a space at the\n\t- shell_getc: don't return a space at the end of a token if the parser\n[1;37;40m", [0m
[0m[1;37;40m '[1;92;40m../bash/parse.tab.c[1;37;40m': '[1;96;40m#  define last_shell_getc_is_singlebyte \\\n#  define MBTEST(x)\t((x) && last_shell_getc_is_singlebyte)\n#  define last_shell_getc_is_singlebyte\t1\nstatic int shell_getc __P((int));\n   and read into shell_input_line, but have not returned from shell_getc.\n * Pushing and popping strings.  This works together with shell_getc to\n * Only called when there is something on the stack.  Called from shell_getc\n/* These are used by read_token_word, but appear up here so that shell_getc\nshell_getc (remove_quoted_newline)\n\t      internal_warning ("shell_getc: ignored null byte in input");\n\t\t    internal_warning(_("shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line truncated"), shell_input_line_size, (unsigned long)SIZE_MAX);\n   last_shell_getc_is_singlebyte should take care of it, though. */\n  while ((c = shell_getc (0)) != EOF && c != character)\n     space to the expansion.  Works with shell_getc above. */\n\t the code in shell_getc that deals with reaching the end of an\n  while ((character = shell_getc (1)) != EOF && shellblank (character))\nitrace("shell_getc: bash_input.location.string = `%s\'", bash_input.location.string);\n      shell_getc (0);\n\tpeek_char = shell_getc (0);\n\tpeek_char = shell_getc (1);\n\t      peek_char = shell_getc (1);\n\t      peek_char = shell_getc (1);\n\t  peek_char = shell_getc (1);\n      ch = shell_getc (qc != \'\\\'\' && (tflags & (LEX_PASSNEXT)) == 0);\n  peekc = shell_getc (0);\n      ch = shell_getc (qc != \'\\\'\' && (tflags & (LEX_INCOMMENT|LEX_PASSNEXT|LEX_QUOTEDDOC)) == 0);\n\t  peekc = shell_getc (1);\n\t  peekc = shell_getc (1);\n\t      peekc = shell_getc (1);\n  c = shell_getc (0);\n\t  peek_char = shell_getc (0);\n\t  peek_char = shell_getc (1);\n\t  peek_char = shell_getc (1);\n\t  peek_char = shell_getc (1);\n      character = shell_getc (cd != \'\\\'\' && pass_next_character == 0);\n  result = (last_shell_getc_is_singlebyte) ? special_case_tokens (token) : -1;\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/bash[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/y.tab.o[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/y.tab.c[1;37;40m': '[1;96;40m#  define last_shell_getc_is_singlebyte \\\n#  define MBTEST(x)\t((x) && last_shell_getc_is_singlebyte)\n#  define last_shell_getc_is_singlebyte\t1\nstatic int shell_getc __P((int));\n   and read into shell_input_line, but have not returned from shell_getc.\n * Pushing and popping strings.  This works together with shell_getc to\n * Only called when there is something on the stack.  Called from shell_getc\n/* These are used by read_token_word, but appear up here so that shell_getc\nshell_getc (remove_quoted_newline)\n\t      internal_warning ("shell_getc: ignored null byte in input");\n\t\t    internal_warning(_("shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line truncated"), shell_input_line_size, (unsigned long)SIZE_MAX);\n   last_shell_getc_is_singlebyte should take care of it, though. */\n  while ((c = shell_getc (0)) != EOF && c != character)\n     space to the expansion.  Works with shell_getc above. */\n\t the code in shell_getc that deals with reaching the end of an\n  while ((character = shell_getc (1)) != EOF && shellblank (character))\nitrace("shell_getc: bash_input.location.string = `%s\'", bash_input.location.string);\n      shell_getc (0);\n\tpeek_char = shell_getc (0);\n\tpeek_char = shell_getc (1);\n\t      peek_char = shell_getc (1);\n\t      peek_char = shell_getc (1);\n\t  peek_char = shell_getc (1);\n      ch = shell_getc (qc != \'\\\'\' && (tflags & (LEX_PASSNEXT)) == 0);\n  peekc = shell_getc (0);\n      ch = shell_getc (qc != \'\\\'\' && (tflags & (LEX_INCOMMENT|LEX_PASSNEXT|LEX_QUOTEDDOC)) == 0);\n\t  peekc = shell_getc (1);\n\t  peekc = shell_getc (1);\n\t      peekc = shell_getc (1);\n  c = shell_getc (0);\n\t  peek_char = shell_getc (0);\n\t  peek_char = shell_getc (1);\n\t  peek_char = shell_getc (1);\n\t  peek_char = shell_getc (1);\n      character = shell_getc (cd != \'\\\'\' && pass_next_character == 0);\n  result = (last_shell_getc_is_singlebyte) ? special_case_tokens (token) : -1;\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/sk.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/ga.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/pl.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) przekracza SIZE_MAX (%lu): linia "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/hr.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc(): shell_input_line_size (%zu) je veća od SIZE_MAX (%lu): "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/cs.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/el.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/it.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/pt_BR.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) excede SIZE_MAX (%lu): linha truncada"\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/bg.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) надвишава SIZE_MAX (%lu): редът е "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/gl.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/nl.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc(): lengte van invoerregel (%zu) overschrijdt SIZE_MAX (%lu): "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/es.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) excede TAMAÑO_MAX (%lu): línea "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/en@quot.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/ja.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/en@quot.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/uk.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/tr.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/pt_BR.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/af.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/pt.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/ca.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) excedeix «SIZE_MAX» (%lu): línia "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/fr.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) dépasse SIZE_MAX (%lu): ligne "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/nb.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: «shell_input_line_size» (%zu) overskrider SIZE_MAX (%lu): linja "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/hu.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: a shell_input_line_size (%zu) meghaladja a MÉRET_MAXIMUM értékét "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/ru.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/nb.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/vi.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/ru.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) превысил SIZE_MAX (%lu): строка "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/id.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/sr.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/pl.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/hr.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/sl.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/hu.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/et.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/pt.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/ga.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: tá méid an líne ionchuir blaoisce (%zu) níos mó ná SIZE_MAX (%"\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/eo.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/da.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/ca.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/sv.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/nl.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/ro.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/lt.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/fi.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/fr.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/es.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/sr.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: величина_реда_улаза_шкољке (%zu) је премашила НАЈВЕЋУ_ВЕЛИЧИНУ (%"\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/eo.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) superas SIZE_MAX (%lu): la linio "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/zh_TW.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\nmsgstr "shell_getc: shell_input_line_size (%zu) 超過 SIZE_MAX (%lu)：列被截斷"\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/en@boldquot.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/bg.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/bash.pot[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/cs.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) přesahuje SIZE_MAX (%lu): řádek "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/zh_CN.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/zh_CN.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\nmsgstr "shell_getc：shell_input_line_size (%zu) 超过 SIZE_MAX (%lu)：行被截断"\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/en@boldquot.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/uk.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) перевищує обмеження SIZE_MAX (%lu): "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/el.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) υπερβαίνει το SIZE_MAX (%lu): γραμμή "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/de.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/tr.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) SIZE_MAX değerini aşıyor (%lu): "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/sv.po[1;37;40m': '[1;96;40m"shell_getc: shell_input_line_size (%zu) exceeds SIZE_MAX (%lu): line "\n"shell_getc: shell_input_line_size (%zu) överstiger SIZE_MAX (%lu): raden "\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/po/zh_TW.gmo[1;37;40m': '[1;96;40mBinary file (standard input) matches\n[1;37;40m', [0m
[0m[1;37;40m '[1;92;40m../bash/CWRU/changelog[1;37;40m': "[1;96;40m\t- shell_getc: if we are reading input from a string, and we get the\n\t  to the values in tflags when calling shell_getc.  Fixes bug reported\n\t- shell_getc: move code that decides whether to append a space to an\n\t- shell_getc: set history_quoting_state based on the contents of the\n\t- shell_getc: don't execute the alias hack (returning a space at the\n\t- shell_getc: don't return a space at the end of a token if the parser\n[1;37;40m"[0m
[0m[1;33;40m}[0m
